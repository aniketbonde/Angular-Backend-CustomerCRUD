package com.demo.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.demo.entity.Customer;
import com.demo.repository.CustomerRepository;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping(path = "/api")
public class CustomerController {

	@Autowired
	private CustomerRepository customerRepository;
	
	@GetMapping(path = "/customers")
	public List<Customer> getAllCustomer(){
		return customerRepository.findAll();
	}
	
	@GetMapping(path = "/customer/id/{id}")
	public Optional<Customer> getCustomerById(@PathVariable("id") long id) {
		return customerRepository.findById(id);
	}
	
	@GetMapping(path = "/customer/firstName/{firstName}")
	public List<Customer> getCustomerByFirstName(@PathVariable("firstName") String firstName){
		return customerRepository.getCustomerByFirstName(firstName);
	}
	
	@GetMapping(path = "/customer/lastName/{lastName}")
	public List<Customer> getCustomerByLastName(@PathVariable("lastName") String lastName){
		return customerRepository.getCustomerByLastName(lastName);
	}
	
	@GetMapping(path = "/customer/age/{age}")
	public List<Customer> getCustomerByAge(@PathVariable("age") int age){
		return customerRepository.getCustomerByAge(age);
	}
	
	@PostMapping(path = "/customers")
	public Customer createCustomer(@RequestBody Customer customer) {
		return customerRepository.save(customer);
	}
	
	@PutMapping("/employees/{id}")
	public ResponseEntity<Employee> updateEmployee(@PathVariable(value = "id") Long employeeId,
			@Valid @RequestBody Employee employeeDetails) throws ResourceNotFoundException {
		Employee employee = employeeRepository.findById(employeeId)
				.orElseThrow(() -> new ResourceNotFoundException("Employee not found for this id :: " + employeeId));

		employee.setEmailId(employeeDetails.getEmailId());
		employee.setLastName(employeeDetails.getLastName());
		employee.setFirstName(employeeDetails.getFirstName());
		final Employee updatedEmployee = employeeRepository.save(employee);
		return ResponseEntity.ok(updatedEmployee);
	}

	@DeleteMapping("/employees/{id}")
	public Map<String, Boolean> deleteEmployee(@PathVariable(value = "id") Long employeeId)
			throws ResourceNotFoundException {
		Employee employee = employeeRepository.findById(employeeId)
				.orElseThrow(() -> new ResourceNotFoundException("Employee not found for this id :: " + employeeId));

		employeeRepository.delete(employee);
		Map<String, Boolean> response = new HashMap<>();
		response.put("deleted", Boolean.TRUE);
		return response;
	}
	
}
